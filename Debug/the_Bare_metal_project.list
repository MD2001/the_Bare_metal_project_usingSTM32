
the_Bare_metal_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a18  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b48  08000b48  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b48  08000b48  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b48  08000b48  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b48  08000b48  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b48  08000b48  00001b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b4c  08000b4c  00001b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000b50  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000b54  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000b54  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006a2  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ed  00000000  00000000  000026cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00002ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d6  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000144e  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c1a  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004cac  00000000  00000000  00004d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000099e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000318  00000000  00000000  00009a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00009d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b30 	.word	0x08000b30

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000b30 	.word	0x08000b30

08000170 <MGPIO_voidSetPinDirection>:
#include "GPIO_interface.h"
#include "GPIO_privet.h"
#include "GPIO_config.h"

/***************************** Code Section *********************************/
void MGPIO_voidSetPinDirection(u8 Copy_Port, u8 Copy_Pin, u8 Copy_Mode) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	if (Copy_Port > 2) {
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 812e 	bhi.w	80003e6 <MGPIO_voidSetPinDirection+0x276>
		/*erorr*/
		return 0;
	}
	if (Copy_Pin > 16) {
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b10      	cmp	r3, #16
 800018e:	f200 812c 	bhi.w	80003ea <MGPIO_voidSetPinDirection+0x27a>
		/*erorr*/
		return 0;
	}
	switch (Copy_Port) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2b02      	cmp	r3, #2
 8000196:	f000 80ed 	beq.w	8000374 <MGPIO_voidSetPinDirection+0x204>
 800019a:	2b02      	cmp	r3, #2
 800019c:	f300 812a 	bgt.w	80003f4 <MGPIO_voidSetPinDirection+0x284>
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d002      	beq.n	80001aa <MGPIO_voidSetPinDirection+0x3a>
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d073      	beq.n	8000290 <MGPIO_voidSetPinDirection+0x120>
 80001a8:	e124      	b.n	80003f4 <MGPIO_voidSetPinDirection+0x284>
	case MGPIO_GPIOA:
		if (Copy_Pin <= 7) {
 80001aa:	79bb      	ldrb	r3, [r7, #6]
 80001ac:	2b07      	cmp	r3, #7
 80001ae:	d834      	bhi.n	800021a <MGPIO_voidSetPinDirection+0xaa>
			GPIOA_CRL &= ~((0b1111) << (Copy_Pin * 4));
 80001b0:	4b92      	ldr	r3, [pc, #584]	@ (80003fc <MGPIO_voidSetPinDirection+0x28c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	79ba      	ldrb	r2, [r7, #6]
 80001b6:	0092      	lsls	r2, r2, #2
 80001b8:	210f      	movs	r1, #15
 80001ba:	fa01 f202 	lsl.w	r2, r1, r2
 80001be:	43d2      	mvns	r2, r2
 80001c0:	4611      	mov	r1, r2
 80001c2:	4a8e      	ldr	r2, [pc, #568]	@ (80003fc <MGPIO_voidSetPinDirection+0x28c>)
 80001c4:	400b      	ands	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |= ((Copy_Mode) << (Copy_Pin * 4));
 80001c8:	4b8c      	ldr	r3, [pc, #560]	@ (80003fc <MGPIO_voidSetPinDirection+0x28c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	7979      	ldrb	r1, [r7, #5]
 80001ce:	79ba      	ldrb	r2, [r7, #6]
 80001d0:	0092      	lsls	r2, r2, #2
 80001d2:	fa01 f202 	lsl.w	r2, r1, r2
 80001d6:	4611      	mov	r1, r2
 80001d8:	4a88      	ldr	r2, [pc, #544]	@ (80003fc <MGPIO_voidSetPinDirection+0x28c>)
 80001da:	430b      	orrs	r3, r1
 80001dc:	6013      	str	r3, [r2, #0]
			if (Copy_Mode == Input_PullUp) {
 80001de:	797b      	ldrb	r3, [r7, #5]
 80001e0:	2b08      	cmp	r3, #8
 80001e2:	d10a      	bne.n	80001fa <MGPIO_voidSetPinDirection+0x8a>
				SET_BIT(GPIOA_ODR, Copy_Pin);
 80001e4:	4b86      	ldr	r3, [pc, #536]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	79ba      	ldrb	r2, [r7, #6]
 80001ea:	2101      	movs	r1, #1
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	4611      	mov	r1, r2
 80001f2:	4a83      	ldr	r2, [pc, #524]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 80001f4:	430b      	orrs	r3, r1
 80001f6:	6013      	str	r3, [r2, #0]
			}
			Copy_Pin -= 8;
			GPIOA_CRH &= ~((0b1111) << (Copy_Pin * 4));
			GPIOA_CRH |= ((Copy_Mode) << (Copy_Pin * 4));
		}
		break;
 80001f8:	e0f9      	b.n	80003ee <MGPIO_voidSetPinDirection+0x27e>
			} else if (Copy_Mode == Input_PullDown) {
 80001fa:	797b      	ldrb	r3, [r7, #5]
 80001fc:	2b08      	cmp	r3, #8
 80001fe:	f040 80f6 	bne.w	80003ee <MGPIO_voidSetPinDirection+0x27e>
				CLR_BIT(GPIOA_ODR, Copy_Pin);
 8000202:	4b7f      	ldr	r3, [pc, #508]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	79ba      	ldrb	r2, [r7, #6]
 8000208:	2101      	movs	r1, #1
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	43d2      	mvns	r2, r2
 8000210:	4611      	mov	r1, r2
 8000212:	4a7b      	ldr	r2, [pc, #492]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 8000214:	400b      	ands	r3, r1
 8000216:	6013      	str	r3, [r2, #0]
		break;
 8000218:	e0e9      	b.n	80003ee <MGPIO_voidSetPinDirection+0x27e>
		} else if (Copy_Pin <= 15) {
 800021a:	79bb      	ldrb	r3, [r7, #6]
 800021c:	2b0f      	cmp	r3, #15
 800021e:	f200 80e6 	bhi.w	80003ee <MGPIO_voidSetPinDirection+0x27e>
			if (Copy_Mode == Input_PullUp) {
 8000222:	797b      	ldrb	r3, [r7, #5]
 8000224:	2b08      	cmp	r3, #8
 8000226:	d10a      	bne.n	800023e <MGPIO_voidSetPinDirection+0xce>
				SET_BIT(GPIOA_ODR, Copy_Pin);
 8000228:	4b75      	ldr	r3, [pc, #468]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	79ba      	ldrb	r2, [r7, #6]
 800022e:	2101      	movs	r1, #1
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	4611      	mov	r1, r2
 8000236:	4a72      	ldr	r2, [pc, #456]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 8000238:	430b      	orrs	r3, r1
 800023a:	6013      	str	r3, [r2, #0]
 800023c:	e00d      	b.n	800025a <MGPIO_voidSetPinDirection+0xea>
			} else if (Copy_Mode == Input_PullDown) {
 800023e:	797b      	ldrb	r3, [r7, #5]
 8000240:	2b08      	cmp	r3, #8
 8000242:	d10a      	bne.n	800025a <MGPIO_voidSetPinDirection+0xea>
				CLR_BIT(GPIOA_ODR, Copy_Pin);
 8000244:	4b6e      	ldr	r3, [pc, #440]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	79ba      	ldrb	r2, [r7, #6]
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a6a      	ldr	r2, [pc, #424]	@ (8000400 <MGPIO_voidSetPinDirection+0x290>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
			Copy_Pin -= 8;
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	3b08      	subs	r3, #8
 800025e:	71bb      	strb	r3, [r7, #6]
			GPIOA_CRH &= ~((0b1111) << (Copy_Pin * 4));
 8000260:	4b68      	ldr	r3, [pc, #416]	@ (8000404 <MGPIO_voidSetPinDirection+0x294>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	79ba      	ldrb	r2, [r7, #6]
 8000266:	0092      	lsls	r2, r2, #2
 8000268:	210f      	movs	r1, #15
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	43d2      	mvns	r2, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a64      	ldr	r2, [pc, #400]	@ (8000404 <MGPIO_voidSetPinDirection+0x294>)
 8000274:	400b      	ands	r3, r1
 8000276:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |= ((Copy_Mode) << (Copy_Pin * 4));
 8000278:	4b62      	ldr	r3, [pc, #392]	@ (8000404 <MGPIO_voidSetPinDirection+0x294>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	7979      	ldrb	r1, [r7, #5]
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	0092      	lsls	r2, r2, #2
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	4611      	mov	r1, r2
 8000288:	4a5e      	ldr	r2, [pc, #376]	@ (8000404 <MGPIO_voidSetPinDirection+0x294>)
 800028a:	430b      	orrs	r3, r1
 800028c:	6013      	str	r3, [r2, #0]
		break;
 800028e:	e0ae      	b.n	80003ee <MGPIO_voidSetPinDirection+0x27e>

	case MGPIO_GPIOB:
		if (Copy_Pin <= 7) {
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	2b07      	cmp	r3, #7
 8000294:	d834      	bhi.n	8000300 <MGPIO_voidSetPinDirection+0x190>
			GPIOB_CRL &= ~((0b1111) << (Copy_Pin * 4));
 8000296:	4b5c      	ldr	r3, [pc, #368]	@ (8000408 <MGPIO_voidSetPinDirection+0x298>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a57      	ldr	r2, [pc, #348]	@ (8000408 <MGPIO_voidSetPinDirection+0x298>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |= ((Copy_Mode) << (Copy_Pin * 4));
 80002ae:	4b56      	ldr	r3, [pc, #344]	@ (8000408 <MGPIO_voidSetPinDirection+0x298>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	7979      	ldrb	r1, [r7, #5]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a52      	ldr	r2, [pc, #328]	@ (8000408 <MGPIO_voidSetPinDirection+0x298>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			if (Copy_Mode == Input_PullUp) {
 80002c4:	797b      	ldrb	r3, [r7, #5]
 80002c6:	2b08      	cmp	r3, #8
 80002c8:	d10a      	bne.n	80002e0 <MGPIO_voidSetPinDirection+0x170>
				SET_BIT(GPIOB_ODR, Copy_Pin);
 80002ca:	4b50      	ldr	r3, [pc, #320]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	79ba      	ldrb	r2, [r7, #6]
 80002d0:	2101      	movs	r1, #1
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a4c      	ldr	r2, [pc, #304]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
			}
			Copy_Pin -= 8;
			GPIOB_CRH &= ~((0b1111) << (Copy_Pin * 4));
			GPIOB_CRH |= ((Copy_Mode) << (Copy_Pin * 4));
		}
		break;
 80002de:	e088      	b.n	80003f2 <MGPIO_voidSetPinDirection+0x282>
			} else if (Copy_Mode == Input_PullDown) {
 80002e0:	797b      	ldrb	r3, [r7, #5]
 80002e2:	2b08      	cmp	r3, #8
 80002e4:	f040 8085 	bne.w	80003f2 <MGPIO_voidSetPinDirection+0x282>
				CLR_BIT(GPIOB_ODR, Copy_Pin);
 80002e8:	4b48      	ldr	r3, [pc, #288]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	79ba      	ldrb	r2, [r7, #6]
 80002ee:	2101      	movs	r1, #1
 80002f0:	fa01 f202 	lsl.w	r2, r1, r2
 80002f4:	43d2      	mvns	r2, r2
 80002f6:	4611      	mov	r1, r2
 80002f8:	4a44      	ldr	r2, [pc, #272]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 80002fa:	400b      	ands	r3, r1
 80002fc:	6013      	str	r3, [r2, #0]
		break;
 80002fe:	e078      	b.n	80003f2 <MGPIO_voidSetPinDirection+0x282>
		} else if (Copy_Pin <= 15) {
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b0f      	cmp	r3, #15
 8000304:	d875      	bhi.n	80003f2 <MGPIO_voidSetPinDirection+0x282>
			if (Copy_Mode == Input_PullUp) {
 8000306:	797b      	ldrb	r3, [r7, #5]
 8000308:	2b08      	cmp	r3, #8
 800030a:	d10a      	bne.n	8000322 <MGPIO_voidSetPinDirection+0x1b2>
				SET_BIT(GPIOB_ODR, Copy_Pin);
 800030c:	4b3f      	ldr	r3, [pc, #252]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	2101      	movs	r1, #1
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
 8000320:	e00d      	b.n	800033e <MGPIO_voidSetPinDirection+0x1ce>
			} else if (Copy_Mode == Input_PullDown) {
 8000322:	797b      	ldrb	r3, [r7, #5]
 8000324:	2b08      	cmp	r3, #8
 8000326:	d10a      	bne.n	800033e <MGPIO_voidSetPinDirection+0x1ce>
				CLR_BIT(GPIOB_ODR, Copy_Pin);
 8000328:	4b38      	ldr	r3, [pc, #224]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	43d2      	mvns	r2, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a34      	ldr	r2, [pc, #208]	@ (800040c <MGPIO_voidSetPinDirection+0x29c>)
 800033a:	400b      	ands	r3, r1
 800033c:	6013      	str	r3, [r2, #0]
			Copy_Pin -= 8;
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	3b08      	subs	r3, #8
 8000342:	71bb      	strb	r3, [r7, #6]
			GPIOB_CRH &= ~((0b1111) << (Copy_Pin * 4));
 8000344:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <MGPIO_voidSetPinDirection+0x2a0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	79ba      	ldrb	r2, [r7, #6]
 800034a:	0092      	lsls	r2, r2, #2
 800034c:	210f      	movs	r1, #15
 800034e:	fa01 f202 	lsl.w	r2, r1, r2
 8000352:	43d2      	mvns	r2, r2
 8000354:	4611      	mov	r1, r2
 8000356:	4a2e      	ldr	r2, [pc, #184]	@ (8000410 <MGPIO_voidSetPinDirection+0x2a0>)
 8000358:	400b      	ands	r3, r1
 800035a:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |= ((Copy_Mode) << (Copy_Pin * 4));
 800035c:	4b2c      	ldr	r3, [pc, #176]	@ (8000410 <MGPIO_voidSetPinDirection+0x2a0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	7979      	ldrb	r1, [r7, #5]
 8000362:	79ba      	ldrb	r2, [r7, #6]
 8000364:	0092      	lsls	r2, r2, #2
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a28      	ldr	r2, [pc, #160]	@ (8000410 <MGPIO_voidSetPinDirection+0x2a0>)
 800036e:	430b      	orrs	r3, r1
 8000370:	6013      	str	r3, [r2, #0]
		break;
 8000372:	e03e      	b.n	80003f2 <MGPIO_voidSetPinDirection+0x282>

	case MGPIO_GPIOC:
		if (Copy_Pin <= 7) {
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2b07      	cmp	r3, #7
 8000378:	d817      	bhi.n	80003aa <MGPIO_voidSetPinDirection+0x23a>
			GPIOC_CRL &= ~((0b1111) << (Copy_Pin * 4));
 800037a:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <MGPIO_voidSetPinDirection+0x2a4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	79ba      	ldrb	r2, [r7, #6]
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	210f      	movs	r1, #15
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	43d2      	mvns	r2, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a21      	ldr	r2, [pc, #132]	@ (8000414 <MGPIO_voidSetPinDirection+0x2a4>)
 800038e:	400b      	ands	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |= ((Copy_Mode) << (Copy_Pin * 4));
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <MGPIO_voidSetPinDirection+0x2a4>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	7979      	ldrb	r1, [r7, #5]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000414 <MGPIO_voidSetPinDirection+0x2a4>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	e011      	b.n	80003ce <MGPIO_voidSetPinDirection+0x25e>
		} else if (Copy_Pin <= 15) {
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b0f      	cmp	r3, #15
 80003ae:	d80e      	bhi.n	80003ce <MGPIO_voidSetPinDirection+0x25e>
			Copy_Pin -= 8;
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	3b08      	subs	r3, #8
 80003b4:	71bb      	strb	r3, [r7, #6]
			GPIOC_CRH &= ~((0b1111) << (Copy_Pin * 4));
 80003b6:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MGPIO_voidSetPinDirection+0x2a8>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	0092      	lsls	r2, r2, #2
 80003be:	210f      	movs	r1, #15
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a13      	ldr	r2, [pc, #76]	@ (8000418 <MGPIO_voidSetPinDirection+0x2a8>)
 80003ca:	400b      	ands	r3, r1
 80003cc:	6013      	str	r3, [r2, #0]
		}
		GPIOC_CRH |= ((Copy_Mode) << (Copy_Pin * 4));
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MGPIO_voidSetPinDirection+0x2a8>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	7979      	ldrb	r1, [r7, #5]
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	0092      	lsls	r2, r2, #2
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <MGPIO_voidSetPinDirection+0x2a8>)
 80003e0:	430b      	orrs	r3, r1
 80003e2:	6013      	str	r3, [r2, #0]

		break;
 80003e4:	e006      	b.n	80003f4 <MGPIO_voidSetPinDirection+0x284>
		return 0;
 80003e6:	bf00      	nop
 80003e8:	e004      	b.n	80003f4 <MGPIO_voidSetPinDirection+0x284>
		return 0;
 80003ea:	bf00      	nop
 80003ec:	e002      	b.n	80003f4 <MGPIO_voidSetPinDirection+0x284>
		break;
 80003ee:	bf00      	nop
 80003f0:	e000      	b.n	80003f4 <MGPIO_voidSetPinDirection+0x284>
		break;
 80003f2:	bf00      	nop
	}
}
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40010800 	.word	0x40010800
 8000400:	4001080c 	.word	0x4001080c
 8000404:	40010804 	.word	0x40010804
 8000408:	40010c00 	.word	0x40010c00
 800040c:	40010c0c 	.word	0x40010c0c
 8000410:	40010c04 	.word	0x40010c04
 8000414:	40011000 	.word	0x40011000
 8000418:	40011004 	.word	0x40011004

0800041c <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 Copy_Port, u8 Copy_Pin, u8 Copy_Value) {
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
 8000426:	460b      	mov	r3, r1
 8000428:	71bb      	strb	r3, [r7, #6]
 800042a:	4613      	mov	r3, r2
 800042c:	717b      	strb	r3, [r7, #5]
	if (Copy_Port > 2) {
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d860      	bhi.n	80004f6 <MGPIO_voidSetPinValue+0xda>
		/*erorr*/
		return 0;
	}
	if (Copy_Pin > 16) {
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b10      	cmp	r3, #16
 8000438:	d85f      	bhi.n	80004fa <MGPIO_voidSetPinValue+0xde>
		/*erorr*/
		return 0;
	}
	switch (Copy_Port) {
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d03e      	beq.n	80004be <MGPIO_voidSetPinValue+0xa2>
 8000440:	2b02      	cmp	r3, #2
 8000442:	dc61      	bgt.n	8000508 <MGPIO_voidSetPinValue+0xec>
 8000444:	2b00      	cmp	r3, #0
 8000446:	d002      	beq.n	800044e <MGPIO_voidSetPinValue+0x32>
 8000448:	2b01      	cmp	r3, #1
 800044a:	d01c      	beq.n	8000486 <MGPIO_voidSetPinValue+0x6a>
 800044c:	e05c      	b.n	8000508 <MGPIO_voidSetPinValue+0xec>
	case MGPIO_GPIOA:
		if (Copy_Value == High) {
 800044e:	797b      	ldrb	r3, [r7, #5]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d10a      	bne.n	800046a <MGPIO_voidSetPinValue+0x4e>
			SET_BIT(GPIOA_BSRR, Copy_Pin);
 8000454:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <MGPIO_voidSetPinValue+0xf4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	2101      	movs	r1, #1
 800045c:	fa01 f202 	lsl.w	r2, r1, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a2b      	ldr	r2, [pc, #172]	@ (8000510 <MGPIO_voidSetPinValue+0xf4>)
 8000464:	430b      	orrs	r3, r1
 8000466:	6013      	str	r3, [r2, #0]
		} else if (Copy_Value == Low) {
			SET_BIT(GPIOA_BRR, Copy_Pin);
		}
		break;
 8000468:	e049      	b.n	80004fe <MGPIO_voidSetPinValue+0xe2>
		} else if (Copy_Value == Low) {
 800046a:	797b      	ldrb	r3, [r7, #5]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d146      	bne.n	80004fe <MGPIO_voidSetPinValue+0xe2>
			SET_BIT(GPIOA_BRR, Copy_Pin);
 8000470:	4b28      	ldr	r3, [pc, #160]	@ (8000514 <MGPIO_voidSetPinValue+0xf8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	79ba      	ldrb	r2, [r7, #6]
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a25      	ldr	r2, [pc, #148]	@ (8000514 <MGPIO_voidSetPinValue+0xf8>)
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
		break;
 8000484:	e03b      	b.n	80004fe <MGPIO_voidSetPinValue+0xe2>

	case MGPIO_GPIOB:
		if (Copy_Value == High) {
 8000486:	797b      	ldrb	r3, [r7, #5]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10a      	bne.n	80004a2 <MGPIO_voidSetPinValue+0x86>
			SET_BIT(GPIOB_BSRR, Copy_Pin);
 800048c:	4b22      	ldr	r3, [pc, #136]	@ (8000518 <MGPIO_voidSetPinValue+0xfc>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	2101      	movs	r1, #1
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a1f      	ldr	r2, [pc, #124]	@ (8000518 <MGPIO_voidSetPinValue+0xfc>)
 800049c:	430b      	orrs	r3, r1
 800049e:	6013      	str	r3, [r2, #0]
		} else if (Copy_Value == Low) {
			SET_BIT(GPIOB_BRR, Copy_Pin);
		}
		break;
 80004a0:	e02f      	b.n	8000502 <MGPIO_voidSetPinValue+0xe6>
		} else if (Copy_Value == Low) {
 80004a2:	797b      	ldrb	r3, [r7, #5]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d12c      	bne.n	8000502 <MGPIO_voidSetPinValue+0xe6>
			SET_BIT(GPIOB_BRR, Copy_Pin);
 80004a8:	4b1c      	ldr	r3, [pc, #112]	@ (800051c <MGPIO_voidSetPinValue+0x100>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	4611      	mov	r1, r2
 80004b6:	4a19      	ldr	r2, [pc, #100]	@ (800051c <MGPIO_voidSetPinValue+0x100>)
 80004b8:	430b      	orrs	r3, r1
 80004ba:	6013      	str	r3, [r2, #0]
		break;
 80004bc:	e021      	b.n	8000502 <MGPIO_voidSetPinValue+0xe6>

	case MGPIO_GPIOC:
		if (Copy_Value == High) {
 80004be:	797b      	ldrb	r3, [r7, #5]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d10a      	bne.n	80004da <MGPIO_voidSetPinValue+0xbe>
			SET_BIT(GPIOC_BSRR, Copy_Pin);
 80004c4:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <MGPIO_voidSetPinValue+0x104>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	79ba      	ldrb	r2, [r7, #6]
 80004ca:	2101      	movs	r1, #1
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a13      	ldr	r2, [pc, #76]	@ (8000520 <MGPIO_voidSetPinValue+0x104>)
 80004d4:	430b      	orrs	r3, r1
 80004d6:	6013      	str	r3, [r2, #0]
		} else if (Copy_Value == Low) {
			SET_BIT(GPIOC_BRR, Copy_Pin);
		}
		break;
 80004d8:	e015      	b.n	8000506 <MGPIO_voidSetPinValue+0xea>
		} else if (Copy_Value == Low) {
 80004da:	797b      	ldrb	r3, [r7, #5]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d112      	bne.n	8000506 <MGPIO_voidSetPinValue+0xea>
			SET_BIT(GPIOC_BRR, Copy_Pin);
 80004e0:	4b10      	ldr	r3, [pc, #64]	@ (8000524 <MGPIO_voidSetPinValue+0x108>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	2101      	movs	r1, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <MGPIO_voidSetPinValue+0x108>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6013      	str	r3, [r2, #0]
		break;
 80004f4:	e007      	b.n	8000506 <MGPIO_voidSetPinValue+0xea>
		return 0;
 80004f6:	bf00      	nop
 80004f8:	e006      	b.n	8000508 <MGPIO_voidSetPinValue+0xec>
		return 0;
 80004fa:	bf00      	nop
 80004fc:	e004      	b.n	8000508 <MGPIO_voidSetPinValue+0xec>
		break;
 80004fe:	bf00      	nop
 8000500:	e002      	b.n	8000508 <MGPIO_voidSetPinValue+0xec>
		break;
 8000502:	bf00      	nop
 8000504:	e000      	b.n	8000508 <MGPIO_voidSetPinValue+0xec>
		break;
 8000506:	bf00      	nop

	}
}
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40010810 	.word	0x40010810
 8000514:	40010814 	.word	0x40010814
 8000518:	40010c10 	.word	0x40010c10
 800051c:	40010c14 	.word	0x40010c14
 8000520:	40011010 	.word	0x40011010
 8000524:	40011014 	.word	0x40011014

08000528 <MGPIO_u8GetPinValue>:
	} else {
		/*error*/
	}
}

u8 MGPIO_u8GetPinValue(u8 Copy_Port, u8 Copy_Pin) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
	if (Copy_Port > 2) {
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d901      	bls.n	8000542 <MGPIO_u8GetPinValue+0x1a>
		/*erorr*/
		return 0;
 800053e:	2300      	movs	r3, #0
 8000540:	e02c      	b.n	800059c <MGPIO_u8GetPinValue+0x74>
	}
	if (Copy_Pin > 16) {
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	2b10      	cmp	r3, #16
 8000546:	d901      	bls.n	800054c <MGPIO_u8GetPinValue+0x24>
		/*erorr*/
		return 0;
 8000548:	2300      	movs	r3, #0
 800054a:	e027      	b.n	800059c <MGPIO_u8GetPinValue+0x74>
	}
	switch (Copy_Port) {
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b02      	cmp	r3, #2
 8000550:	d01a      	beq.n	8000588 <MGPIO_u8GetPinValue+0x60>
 8000552:	2b02      	cmp	r3, #2
 8000554:	dc22      	bgt.n	800059c <MGPIO_u8GetPinValue+0x74>
 8000556:	2b00      	cmp	r3, #0
 8000558:	d002      	beq.n	8000560 <MGPIO_u8GetPinValue+0x38>
 800055a:	2b01      	cmp	r3, #1
 800055c:	d00a      	beq.n	8000574 <MGPIO_u8GetPinValue+0x4c>
 800055e:	e01d      	b.n	800059c <MGPIO_u8GetPinValue+0x74>
	case MGPIO_GPIOA:
		return GET_BIT(GPIOA_IDR, Copy_Pin);
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MGPIO_u8GetPinValue+0x80>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	fa22 f303 	lsr.w	r3, r2, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	e013      	b.n	800059c <MGPIO_u8GetPinValue+0x74>

	case MGPIO_GPIOB:
		return GET_BIT(GPIOB_IDR, Copy_Pin);
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MGPIO_u8GetPinValue+0x84>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	fa22 f303 	lsr.w	r3, r2, r3
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	e009      	b.n	800059c <MGPIO_u8GetPinValue+0x74>

	case MGPIO_GPIOC:
		return GET_BIT(GPIOC_IDR, Copy_Pin);
 8000588:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <MGPIO_u8GetPinValue+0x88>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	fa22 f303 	lsr.w	r3, r2, r3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	e7ff      	b.n	800059c <MGPIO_u8GetPinValue+0x74>

	}
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40010808 	.word	0x40010808
 80005ac:	40010c08 	.word	0x40010c08
 80005b0:	40011008 	.word	0x40011008

080005b4 <MGPIO_voidToglePin>:
void MGPIO_voidToglePin(u8 Copy_Port, u8 Copy_Pin) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	if (Copy_Port <= 2) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d814      	bhi.n	80005f4 <MGPIO_voidToglePin+0x40>
		if (Copy_Pin <= 16) {
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	2b10      	cmp	r3, #16
 80005ce:	d811      	bhi.n	80005f4 <MGPIO_voidToglePin+0x40>

			MGPIO_voidSetPinValue(Copy_Port, Copy_Pin,
					!MGPIO_u8GetPinValue(Copy_Port, Copy_Pin));
 80005d0:	79ba      	ldrb	r2, [r7, #6]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ffa6 	bl	8000528 <MGPIO_u8GetPinValue>
 80005dc:	4603      	mov	r3, r0
			MGPIO_voidSetPinValue(Copy_Port, Copy_Pin,
 80005de:	2b00      	cmp	r3, #0
 80005e0:	bf0c      	ite	eq
 80005e2:	2301      	moveq	r3, #1
 80005e4:	2300      	movne	r3, #0
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	79b9      	ldrb	r1, [r7, #6]
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff14 	bl	800041c <MGPIO_voidSetPinValue>
		}
	} else {
		/*error*/
	}
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <HLCD_voidInit>:
/***************************** Code Section *********************************/

  #if LCD_MODE == LCD_8_BIT 
  /* use this function to set the LCD to 8-bit mode  */
    void HLCD_voidInit(void)
    { 
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
        MSysTic_voidSetBusyWait(520000);   //requier to initalize the systic peripheral 40ms 72MHz
 8000600:	4811      	ldr	r0, [pc, #68]	@ (8000648 <HLCD_voidInit+0x4c>)
 8000602:	f000 f9bb 	bl	800097c <MSysTic_voidSetBusyWait>
        HLCD_voidSendCommand(Function_Set);
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <HLCD_voidInit+0x50>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f824 	bl	8000658 <HLCD_voidSendCommand>
        MSysTic_voidSetBusyWait(13000);
 8000610:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000614:	f000 f9b2 	bl	800097c <MSysTic_voidSetBusyWait>
        HLCD_voidSendCommand(Display_ON_OFF);
 8000618:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <HLCD_voidInit+0x54>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f81b 	bl	8000658 <HLCD_voidSendCommand>
        MSysTic_voidSetBusyWait(13000);
 8000622:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000626:	f000 f9a9 	bl	800097c <MSysTic_voidSetBusyWait>
        HLCD_voidSendCommand(Display_Clera);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 f814 	bl	8000658 <HLCD_voidSendCommand>
        MSysTic_voidSetBusyWait(26000);
 8000630:	f246 5090 	movw	r0, #26000	@ 0x6590
 8000634:	f000 f9a2 	bl	800097c <MSysTic_voidSetBusyWait>
        HLCD_voidSendCommand(Entery_mode);
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HLCD_voidInit+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f80b 	bl	8000658 <HLCD_voidSendCommand>
    } 
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	0007ef40 	.word	0x0007ef40
 800064c:	20000000 	.word	0x20000000
 8000650:	20000002 	.word	0x20000002
 8000654:	20000001 	.word	0x20000001

08000658 <HLCD_voidSendCommand>:
    
     /*write function that use to send Command to LCD */
    void HLCD_voidSendCommand(u8 Copy_data)
    {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
        HLCD_voidInitPins();
 8000662:	f000 f8f5 	bl	8000850 <HLCD_voidInitPins>
        MGPIO_voidSetPinValue(RS,Low);     // Clear RS Low
 8000666:	2200      	movs	r2, #0
 8000668:	2107      	movs	r1, #7
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff fed6 	bl	800041c <MGPIO_voidSetPinValue>
        MSysTic_voidSetBusyWait(13000);             //requier to initalize the systic peripheral 1ms 72MHz 
 8000670:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000674:	f000 f982 	bl	800097c <MSysTic_voidSetBusyWait>
        MGPIO_voidSetPinValue(RW,Low);      // Clear RW low
 8000678:	2200      	movs	r2, #0
 800067a:	2106      	movs	r1, #6
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff fecd 	bl	800041c <MGPIO_voidSetPinValue>
        MSysTic_voidSetBusyWait(13000); 
 8000682:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000686:	f000 f979 	bl	800097c <MSysTic_voidSetBusyWait>
        MGPIO_voidSetPinValue(EN,High);     // Set EN high
 800068a:	2201      	movs	r2, #1
 800068c:	2105      	movs	r1, #5
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fec4 	bl	800041c <MGPIO_voidSetPinValue>
        MSysTic_voidSetBusyWait(26000);     // wiat 2ms 72MHz
 8000694:	f246 5090 	movw	r0, #26000	@ 0x6590
 8000698:	f000 f970 	bl	800097c <MSysTic_voidSetBusyWait>

        MGPIO_voidSetPinValue(DB0,GET_BIT(Copy_data,0));        /*sed data to LCD in DB0*/
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	2104      	movs	r1, #4
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff feb7 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB1,GET_BIT(Copy_data,1));        /*sed data to LCD in DB1*/
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	085b      	lsrs	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	2103      	movs	r1, #3
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff feac 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB2,GET_BIT(Copy_data,2));        /*sed data to LCD in DB2*/
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	210f      	movs	r1, #15
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fea1 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB3,GET_BIT(Copy_data,3));        /*sed data to LCD in DB3*/
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	08db      	lsrs	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	210c      	movs	r1, #12
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fe96 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB4,GET_BIT(Copy_data,4));        /*sed data to LCD in DB4*/
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	210b      	movs	r1, #11
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fe8b 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB5,GET_BIT(Copy_data,5));        /*sed data to LCD in DB5*/
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	095b      	lsrs	r3, r3, #5
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	210a      	movs	r1, #10
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fe80 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB6,GET_BIT(Copy_data,6));        /*sed data to LCD in DB6*/
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	099b      	lsrs	r3, r3, #6
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	2109      	movs	r1, #9
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fe75 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB7,GET_BIT(Copy_data,7));        /*sed data to LCD in DB7*/
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	09db      	lsrs	r3, r3, #7
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	2108      	movs	r1, #8
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fe6d 	bl	800041c <MGPIO_voidSetPinValue>

        MGPIO_voidSetPinValue(EN,Low);     // Clear EN low
 8000742:	2200      	movs	r2, #0
 8000744:	2105      	movs	r1, #5
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff fe68 	bl	800041c <MGPIO_voidSetPinValue>
    }
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HLCD_voidSendData>:


    /*write function that use to send data to LCD */
    void HLCD_voidSendData(u8 Copy_data)
    {   
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
        HLCD_voidInitPins();
 800075e:	f000 f877 	bl	8000850 <HLCD_voidInitPins>
        MGPIO_voidSetPinValue(RS,High);     // Set RS high
 8000762:	2201      	movs	r2, #1
 8000764:	2107      	movs	r1, #7
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff fe58 	bl	800041c <MGPIO_voidSetPinValue>
        MSysTic_voidSetBusyWait(13000);             //requier to initalize the systic peripheral 1ms 72MHz 
 800076c:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000770:	f000 f904 	bl	800097c <MSysTic_voidSetBusyWait>
        MGPIO_voidSetPinValue(RW,Low);      // Clear RW low
 8000774:	2200      	movs	r2, #0
 8000776:	2106      	movs	r1, #6
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff fe4f 	bl	800041c <MGPIO_voidSetPinValue>
        MSysTic_voidSetBusyWait(13000); 
 800077e:	f243 20c8 	movw	r0, #13000	@ 0x32c8
 8000782:	f000 f8fb 	bl	800097c <MSysTic_voidSetBusyWait>
        MGPIO_voidSetPinValue(EN,High);     // Set EN high
 8000786:	2201      	movs	r2, #1
 8000788:	2105      	movs	r1, #5
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fe46 	bl	800041c <MGPIO_voidSetPinValue>
        MSysTic_voidSetBusyWait(26000);     // wiat 2ms 72MHz
 8000790:	f246 5090 	movw	r0, #26000	@ 0x6590
 8000794:	f000 f8f2 	bl	800097c <MSysTic_voidSetBusyWait>

        MGPIO_voidSetPinValue(DB0,GET_BIT(Copy_data,0));        /*sed data to LCD in DB0*/
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	2104      	movs	r1, #4
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff fe39 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB1,GET_BIT(Copy_data,1));        /*sed data to LCD in DB1*/
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2103      	movs	r1, #3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fe2e 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB2,GET_BIT(Copy_data,2));        /*sed data to LCD in DB2*/
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	210f      	movs	r1, #15
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff fe23 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB3,GET_BIT(Copy_data,3));        /*sed data to LCD in DB3*/
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	210c      	movs	r1, #12
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fe18 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB4,GET_BIT(Copy_data,4));        /*sed data to LCD in DB4*/
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	091b      	lsrs	r3, r3, #4
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	210b      	movs	r1, #11
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fe0d 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB5,GET_BIT(Copy_data,5));        /*sed data to LCD in DB5*/
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	095b      	lsrs	r3, r3, #5
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	210a      	movs	r1, #10
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fe02 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB6,GET_BIT(Copy_data,6));        /*sed data to LCD in DB6*/
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	099b      	lsrs	r3, r3, #6
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	2109      	movs	r1, #9
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fdf7 	bl	800041c <MGPIO_voidSetPinValue>
        MGPIO_voidSetPinValue(DB7,GET_BIT(Copy_data,7));        /*sed data to LCD in DB7*/
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	09db      	lsrs	r3, r3, #7
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	2108      	movs	r1, #8
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fdef 	bl	800041c <MGPIO_voidSetPinValue>

        MGPIO_voidSetPinValue(EN,Low);     // Clear EN low
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fdea 	bl	800041c <MGPIO_voidSetPinValue>
        
    }
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <HLCD_voidInitPins>:
    /*to chick if the right pins get config in right way*/
    static void HLCD_voidInitPins(void)
    {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
        if (Init_Pins==0)
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <HLCD_voidInitPins+0x84>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d139      	bne.n	80008d0 <HLCD_voidInitPins+0x80>
        {
            MGPIO_voidSetPinDirection(RS,PINS_MODE);       
 800085c:	2202      	movs	r2, #2
 800085e:	2107      	movs	r1, #7
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fc85 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(RW,PINS_MODE);
 8000866:	2202      	movs	r2, #2
 8000868:	2106      	movs	r1, #6
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fc80 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(EN,PINS_MODE);
 8000870:	2202      	movs	r2, #2
 8000872:	2105      	movs	r1, #5
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fc7b 	bl	8000170 <MGPIO_voidSetPinDirection>

            MGPIO_voidSetPinDirection(DB0,PINS_MODE);
 800087a:	2202      	movs	r2, #2
 800087c:	2104      	movs	r1, #4
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff fc76 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB1,PINS_MODE);
 8000884:	2202      	movs	r2, #2
 8000886:	2103      	movs	r1, #3
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fc71 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB2,PINS_MODE);
 800088e:	2202      	movs	r2, #2
 8000890:	210f      	movs	r1, #15
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff fc6c 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB3,PINS_MODE);
 8000898:	2202      	movs	r2, #2
 800089a:	210c      	movs	r1, #12
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fc67 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB4,PINS_MODE);
 80008a2:	2202      	movs	r2, #2
 80008a4:	210b      	movs	r1, #11
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fc62 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB5,PINS_MODE);
 80008ac:	2202      	movs	r2, #2
 80008ae:	210a      	movs	r1, #10
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fc5d 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB6,PINS_MODE);
 80008b6:	2202      	movs	r2, #2
 80008b8:	2109      	movs	r1, #9
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fc58 	bl	8000170 <MGPIO_voidSetPinDirection>
            MGPIO_voidSetPinDirection(DB7,PINS_MODE);
 80008c0:	2202      	movs	r2, #2
 80008c2:	2108      	movs	r1, #8
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fc53 	bl	8000170 <MGPIO_voidSetPinDirection>
            Init_Pins=1;
 80008ca:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <HLCD_voidInitPins+0x84>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
        }
    }
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000020 	.word	0x20000020

080008d8 <MRCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_privet.h"
#include "RCC_config.h"
/***************************** Code Section *********************************/
void MRCC_voidInitSysClock(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
				RCC_CFGR = 0x00000001;	//Set Source clcok HSE
	#elif       RCC_Clock_TYPE	==  RCC_HSE_RC
				RCC_CR = 0x00050000;     //Set HSEON/HSEBYP HIGH
				RCC_CFGR = 0x00000001;	//Set Source clcok  HSE	
    #elif       RCC_Clock_TYPE	==  RCC_HSI	
				RCC_CR = 0x00000081;	// Set HSI HIGH + terming 0
 80008dc:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <MRCC_voidInitSysClock+0x18>)
 80008de:	2281      	movs	r2, #129	@ 0x81
 80008e0:	601a      	str	r2, [r3, #0]
				RCC_CFGR = 0x00000000; //Set Source clcok  HSI
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <MRCC_voidInitSysClock+0x1c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
		#endif
	#else 		
		#error "clock sourc type is worng"
	 
	#endif
}	
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40021004 	.word	0x40021004

080008f8 <MRCC_voidEnablePeripheral>:



void MRCC_voidEnablePeripheral(u8 Copy_IdBus,u8 Copy_Peripheral)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	if(Copy_Peripheral<=31)
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b1f      	cmp	r3, #31
 800090c:	d82a      	bhi.n	8000964 <MRCC_voidEnablePeripheral+0x6c>
	{	
	switch(Copy_IdBus)
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d01c      	beq.n	800094e <MRCC_voidEnablePeripheral+0x56>
 8000914:	2b03      	cmp	r3, #3
 8000916:	dc25      	bgt.n	8000964 <MRCC_voidEnablePeripheral+0x6c>
 8000918:	2b01      	cmp	r3, #1
 800091a:	d002      	beq.n	8000922 <MRCC_voidEnablePeripheral+0x2a>
 800091c:	2b02      	cmp	r3, #2
 800091e:	d00b      	beq.n	8000938 <MRCC_voidEnablePeripheral+0x40>
	else
	{
		//error
	}
	
}
 8000920:	e020      	b.n	8000964 <MRCC_voidEnablePeripheral+0x6c>
		case RCC_AHB	:SET_BIT(RCC_AHBENR,Copy_Peripheral);break;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MRCC_voidEnablePeripheral+0x78>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	79ba      	ldrb	r2, [r7, #6]
 8000928:	2101      	movs	r1, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	4611      	mov	r1, r2
 8000930:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <MRCC_voidEnablePeripheral+0x78>)
 8000932:	430b      	orrs	r3, r1
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e015      	b.n	8000964 <MRCC_voidEnablePeripheral+0x6c>
		case RCC_APB1   :SET_BIT(RCC_APB1ENR,Copy_Peripheral);break;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MRCC_voidEnablePeripheral+0x7c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	79ba      	ldrb	r2, [r7, #6]
 800093e:	2101      	movs	r1, #1
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <MRCC_voidEnablePeripheral+0x7c>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	e00a      	b.n	8000964 <MRCC_voidEnablePeripheral+0x6c>
		case RCC_APB2   :SET_BIT(RCC_APB2ENR,Copy_Peripheral);break;
 800094e:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MRCC_voidEnablePeripheral+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	2101      	movs	r1, #1
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <MRCC_voidEnablePeripheral+0x80>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	bf00      	nop
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021014 	.word	0x40021014
 8000974:	4002101c 	.word	0x4002101c
 8000978:	40021018 	.word	0x40021018

0800097c <MSysTic_voidSetBusyWait>:
/***************************** Code Section *********************************/


//Set Start value of load regester
void MSysTic_voidSetBusyWait(u32 Copy_u32Value)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    if(Copy_u32Value<=0x7FFFFF)              // if the value you enter is higher than 23-bit that is mean you enter not valied value 
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800098a:	d20f      	bcs.n	80009ac <MSysTic_voidSetBusyWait+0x30>
    {
        STK_LOAD = Copy_u32Value;                      //Set the reload register value
 800098c:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <MSysTic_voidSetBusyWait+0x3c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
        SET_BIT(STK_CTRL,0);                           ///Set the Enable value to enable counter
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MSysTic_voidSetBusyWait+0x40>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <MSysTic_voidSetBusyWait+0x40>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6013      	str	r3, [r2, #0]
        while(GET_BIT(STK_CTRL,16)==0);                //bull up the prosessor till the load finsh 
 800099e:	bf00      	nop
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MSysTic_voidSetBusyWait+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f9      	beq.n	80009a0 <MSysTic_voidSetBusyWait+0x24>
    }
    else{
        //erorr
    }                       

}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e014 	.word	0xe000e014
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <MSysTic_voidInit>:

// intialize some paramter the configerd in config file
void MSysTic_voidInit()
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
    if(CLOCK_SOURCE == AHPDIV)
    {
        CLR_BIT(STK_CTRL,2);        // Set the speed clock to AHP/8
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <MSysTic_voidInit+0x24>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <MSysTic_voidInit+0x24>)
 80009ca:	f023 0304 	bic.w	r3, r3, #4
 80009ce:	6013      	str	r3, [r2, #0]
        SET_BIT(STK_CTRL,2);        // Set to AHP 
    }

    if(TICK_INTERRUPT == DISTIC) 
    {
        CLR_BIT(STK_CTRL,1);        // to disable the interrupt 
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <MSysTic_voidInit+0x24>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a03      	ldr	r2, [pc, #12]	@ (80009e4 <MSysTic_voidInit+0x24>)
 80009d6:	f023 0302 	bic.w	r3, r3, #2
 80009da:	6013      	str	r3, [r2, #0]
    }
    else
    {
        SET_BIT(STK_CTRL,1);        // to enable the interrupt
    }      
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <main>:

/***************************** Globale variable Section *****************************/

/***************************** main code Section *****************************/

int main() {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	MRCC_voidInitSysClock();
 80009ee:	f7ff ff73 	bl	80008d8 <MRCC_voidInitSysClock>
	MRCC_voidEnablePeripheral(RCC_GPIOAEnable);
 80009f2:	2102      	movs	r1, #2
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ff7f 	bl	80008f8 <MRCC_voidEnablePeripheral>
	MGPIO_voidSetPinDirection(MGPIO_GPIOA, MGPIO_PIN1, Output_PP_2MHZ);
 80009fa:	2202      	movs	r2, #2
 80009fc:	2101      	movs	r1, #1
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fbb6 	bl	8000170 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(MGPIO_GPIOA, MGPIO_PIN2, Input_PullUp);
 8000a04:	2208      	movs	r2, #8
 8000a06:	2102      	movs	r1, #2
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fbb1 	bl	8000170 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(MGPIO_GPIOA, MGPIO_PIN3, Output_PP_2MHZ);
 8000a0e:	2202      	movs	r2, #2
 8000a10:	2103      	movs	r1, #3
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fbac 	bl	8000170 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinValue(MGPIO_GPIOA, MGPIO_PIN1, High);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fcfd 	bl	800041c <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinValue(MGPIO_GPIOA, MGPIO_PIN3, Low);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2103      	movs	r1, #3
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fcf8 	bl	800041c <MGPIO_voidSetPinValue>
	MSysTic_voidInit();
 8000a2c:	f7ff ffc8 	bl	80009c0 <MSysTic_voidInit>
	HLCD_voidInit();
 8000a30:	f7ff fde4 	bl	80005fc <HLCD_voidInit>
	HLCD_voidSendData('H');
 8000a34:	2048      	movs	r0, #72	@ 0x48
 8000a36:	f7ff fe8d 	bl	8000754 <HLCD_voidSendData>
	u8 x  ;
	while (1) {
		if(!MGPIO_u8GetPinValue(MGPIO_GPIOA, MGPIO_PIN2))
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fd73 	bl	8000528 <MGPIO_u8GetPinValue>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d106      	bne.n	8000a56 <main+0x6e>
		{
			x=!x;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2301      	moveq	r3, #1
 8000a50:	2300      	movne	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	71fb      	strb	r3, [r7, #7]
		}

		if (x == High) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d10c      	bne.n	8000a76 <main+0x8e>
			MGPIO_voidToglePin(MGPIO_GPIOA, MGPIO_PIN3); //red led
 8000a5c:	2103      	movs	r1, #3
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fda8 	bl	80005b4 <MGPIO_voidToglePin>
			MGPIO_voidSetPinValue(MGPIO_GPIOA, MGPIO_PIN1, Low);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2101      	movs	r1, #1
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fcd7 	bl	800041c <MGPIO_voidSetPinValue>
			MSysTic_voidSetBusyWait(500000);
 8000a6e:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <main+0xa8>)
 8000a70:	f7ff ff84 	bl	800097c <MSysTic_voidSetBusyWait>
 8000a74:	e7e1      	b.n	8000a3a <main+0x52>
		} else {
			MGPIO_voidToglePin(MGPIO_GPIOA, MGPIO_PIN1); //green led
 8000a76:	2101      	movs	r1, #1
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fd9b 	bl	80005b4 <MGPIO_voidToglePin>
			MGPIO_voidSetPinValue(MGPIO_GPIOA, MGPIO_PIN3, Low);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2103      	movs	r1, #3
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fcca 	bl	800041c <MGPIO_voidSetPinValue>
			MSysTic_voidSetBusyWait(500000);
 8000a88:	4801      	ldr	r0, [pc, #4]	@ (8000a90 <main+0xa8>)
 8000a8a:	f7ff ff77 	bl	800097c <MSysTic_voidSetBusyWait>
		if(!MGPIO_u8GetPinValue(MGPIO_GPIOA, MGPIO_PIN2))
 8000a8e:	e7d4      	b.n	8000a3a <main+0x52>
 8000a90:	0007a120 	.word	0x0007a120

08000a94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a94:	480d      	ldr	r0, [pc, #52]	@ (8000acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ac2:	f000 f811 	bl	8000ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff ff8f 	bl	80009e8 <main>

08000aca <LoopForever>:

LoopForever:
  b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   r0, =_estack
 8000acc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ad8:	08000b50 	.word	0x08000b50
  ldr r2, =_sbss
 8000adc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ae0:	20000024 	.word	0x20000024

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <__libc_init_array>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	2600      	movs	r6, #0
 8000aec:	4d0c      	ldr	r5, [pc, #48]	@ (8000b20 <__libc_init_array+0x38>)
 8000aee:	4c0d      	ldr	r4, [pc, #52]	@ (8000b24 <__libc_init_array+0x3c>)
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	10a4      	asrs	r4, r4, #2
 8000af4:	42a6      	cmp	r6, r4
 8000af6:	d109      	bne.n	8000b0c <__libc_init_array+0x24>
 8000af8:	f000 f81a 	bl	8000b30 <_init>
 8000afc:	2600      	movs	r6, #0
 8000afe:	4d0a      	ldr	r5, [pc, #40]	@ (8000b28 <__libc_init_array+0x40>)
 8000b00:	4c0a      	ldr	r4, [pc, #40]	@ (8000b2c <__libc_init_array+0x44>)
 8000b02:	1b64      	subs	r4, r4, r5
 8000b04:	10a4      	asrs	r4, r4, #2
 8000b06:	42a6      	cmp	r6, r4
 8000b08:	d105      	bne.n	8000b16 <__libc_init_array+0x2e>
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b10:	4798      	blx	r3
 8000b12:	3601      	adds	r6, #1
 8000b14:	e7ee      	b.n	8000af4 <__libc_init_array+0xc>
 8000b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1a:	4798      	blx	r3
 8000b1c:	3601      	adds	r6, #1
 8000b1e:	e7f2      	b.n	8000b06 <__libc_init_array+0x1e>
 8000b20:	08000b48 	.word	0x08000b48
 8000b24:	08000b48 	.word	0x08000b48
 8000b28:	08000b48 	.word	0x08000b48
 8000b2c:	08000b4c 	.word	0x08000b4c

08000b30 <_init>:
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	bf00      	nop
 8000b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b36:	bc08      	pop	{r3}
 8000b38:	469e      	mov	lr, r3
 8000b3a:	4770      	bx	lr

08000b3c <_fini>:
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	bf00      	nop
 8000b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b42:	bc08      	pop	{r3}
 8000b44:	469e      	mov	lr, r3
 8000b46:	4770      	bx	lr
